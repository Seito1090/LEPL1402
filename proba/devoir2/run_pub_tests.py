from reed_solomon import *

if __name__ == "__main__":
    test1 = ["10100011", "10110100", "00010111"]
    test2 = ["10101111", "11000110", "01101001"]
    test3 = ["00010100", "00000011", "00010111"]
    test4 = ["00100111", "00111011", "00011100"]
    test5 = ["11001101", "01001001", "01100111"]
    test6 = ["00001011", "01100101", "01010000"]
    test7 = ["11011110", "10001111", "11101110"]
    test8 = ["10000111", "01100001", "01011100"]
    test9 = ["11101111", "01001101"]
    test10 = ["01011000", "10100010"]
    test11 = ["11100000", "00101010"]
    test12 = ["11111111", "01000100"]
    test13 = [6, 10, ["00111100", "01000001", "10000101", "11000110", "10100010", "00001011", "01010001", "11001000", "00111111", "01001000"], ["01101110", "11000000", "01000011", "00001101", "01010111", "10011010"], ["11100110", "01110101", "10000011", "00010011", "10101000", "10000011", "01111111", "11101010", "10111100", "10111011"]]
    test14 = [8, 20, ["00010101", "00110010", "11100001", "01011000", "11010101", "10000011", "01101010", "10101101", "11001000", "11010011", "11100000", "01100111", "10101111", "10111010", "11000101", "11000110", "10000111", "11010010", "11110100", "10000000"], ["00010101", "10010000", "01101010", "11101110", "00101111", "01110001", "11010001", "00101000"], ["10011000", "10010010", "11101111", "01010001", "11000101", "00000001", "00001110", "01110110", "00111011", "11111111", "00101111", "11100011", "11111111", "11001001", "10111101", "00100011", "10001110", "11000001", "10110101", "11100011"]]
    test15 = [10, 20, ["11111000", "01101000", "10101100", "00001111", "10111101", "10100011", "00000011", "00110001", "11001101", "11001111", "00001100", "01100101", "11111010", "01001101", "00010111", "10000110", "01000100", "11100110", "01010000", "10110011"], ["10111110", "01111110", "00111101", "11000110", "00110100", "00000101", "01010100", "11101010", "00010110", "00100001"], ["00111101", "10001011", "00000000", "10010100", "01000110", "11010111", "01010101", "00110101", "10000101", "00001110", "11100111", "11000110", "01101001", "11111110", "11111100", "00001100", "10101001", "10000001", "11000001", "01001100"]]
    test16 = [10, 40, ["01111110", "00001001", "11010000", "00111001", "10000111", "01111011", "00001100", "01011000", "01111001", "01111111", "10110001", "10110101", "01000010", "11110000", "01010110", "11111001", "10000100", "11101110", "01110001", "01100111", "01000111", "10100011", "11000111", "11110101", "01111100", "00101011", "00000110", "00110111", "01101100", "10010100", "11001010", "10011000", "10010000", "10101101", "01100010", "11101100", "11011111", "00010111", "11111000", "01101011"], ["01010111", "01110011", "11001001", "01000101", "11000100", "10010101", "11010000", "01100110", "10101101", "10100010"], ["01000101", "10000111", "00000111", "11100001", "01000110", "10011111", "11000110", "00011111", "10010100", "10111000", "11001001", "01101101", "11000000", "11001010", "00011110", "01011000", "00100111", "01000010", "10111111", "10100011", "11000111", "11101110", "11001101", "01011000", "00011110", "00000100", "11010110", "00011011", "11110001", "11101101", "11100000", "00100000", "01110010", "11011010", "11111101", "01000011", "10000101", "10111111", "10110110", "10111100"]]
    test17 = [6, 10, ["00100010", "01011001", "01111010", "11000101", "01010111", "11110111", "00100101", "00100100", "10001011", "10010010"], ["01111010", "1101a011", "1s10q001", "11110000", "11001111", "10111111", "00f10001", "00010001", "00111001", "h1110101"], ["00111010", "11000010", "01111110", "00100001", "11001111", "00001001"]]
    test18 = [8, 20, ["01110110", "11111010", "11000001", "10101010", "00101000", "00000100", "10100000", "11110101", "00100011", "00110110", "00001000", "11111100", "00111100", "11111011", "10011010", "01010000", "01100000", "10011100", "00110101", "11101110"], ["11111111", "001x1111", "0k11110v", "00010100", "01001010", "10000111", "11p10111", "01y01101", "0et11111", "011b1110", "1101k1w1", "r11i0010", "1lt10001", "0c0r0010", "10011010", "000qbf01", "z1001001", "00110110", "01111000", "11010111"], ["00001101", "00010010", "10001011", "01100000", "01001010", "01100000", "11011100", "00100110"]]
    test19 = [10, 20, ["01100010", "00010111", "11110011", "10001001", "10101100", "11011100", "00001110", "01100111", "11011000", "11000001", "00101000", "10110100", "10001100", "11011110", "11001010", "01011000", "11100110", "01001001", "01111110", "11100101"], ["10000101", "1a0e0010", "100w1r11", "11010111", "u10h101j", "100110r0", "11001000", "00001110", "r1011100", "101i0v00", "11110111", "10011001", "11001j10", "01101101", "00101101", "1b1c1110", "00110000", "000000hq", "01110110", "0100b100"], ["01011010", "01100101", "01111100", "10101100", "10001011", "01011011", "01010001", "01100101", "10100001", "00010011"]]
    test20 = [10, 40, ["11101010", "00101100", "11110011", "10010101", "00110110", "11011110", "01010011", "01000111", "00001110", "11100010", "11011011", "01111011", "10101111", "10011000", "00110000", "01100101", "10101000", "11000100", "01000001", "11101110", "00011111", "10011111", "11011100", "10111101", "10100000", "11000011", "11000111", "00000100", "10001101", "01110010", "01111010", "01011001", "10110111", "00100111", "11000010", "11111110", "00000110", "10111000", "11100001", "10110000"], ["01e0ki11", "10110011", "i01u0m0q", "1j001r00", "01001010", "10111w0h", "0011l000", "1e11111h", "01111111", "11g0101u", "00001u00", "11111111", "010001m1", "00r001h0", "10101010", "11101be0", "0100111f", "0011q100", "11sk1000", "101e0b00", "100p0110", "10000111", "j0cwv100", "10100101", "00110000", "a0p11010", "111iyg1n", "11100101", "1111111j", "1cs0np00", "1z10101g", "01t00101", "m1j00011", "0010ya00", "100rt100", "11000000", "1k001110", "10001x01", "0c0u1011", "00n011n0"], ["01111110", "10110010", "01001101", "00001100", "00100001", "00000000", "11000001", "01100111", "11100100", "00010100"]]
    test21 = [6, 10, ["10001111", "10011101", "10100101", "00110110", "00000010", "01101001", "00000101", "10100111", "11011101", "10000011"], ["01011011", "10111001", "00010101", "11110100", "00110001", "10010011", "1110011", "0111001", "0010101", "0100101"], ["01110100", "00101110", "01011110", "01101001", "00001100", "10010010"]]
    test22 = [8, 20, ["10101001", "11001010", "00110000", "10010010", "10110001", "10101000", "01111111", "01000000", "10010101", "01101011", "00101000", "10101010", "11100100", "11010010", "10111000", "01011000", "00010101", "01101001", "01000101", "11011011"], ["10101001", "000010", "00011010", "11100111", "101010", "00111001", "1011010", "00010", "1010", "111000", "1101001", "000000", "010100", "110011", "00011111", "00110011", "0101", "10110011", "00000110", "1100101"], ["00110100", "00001100", "00000111", "10101111", "11110111", "01010000", "00101111", "01100010"]]
    test23 = [10, 20, ["01110101", "10001111", "01101111", "00101110", "10100111", "01000100", "10001010", "00111100", "10011010", "00100101", "01000111", "01101100", "10011001", "11000011", "00110110", "10000010", "00101001", "11011011", "10101010", "01110000"], ["11110010", "11010", "00101111", "10111110", "0100011", "10100", "00100", "1001011", "0010111", "10010000", "0001000", "1001101", "1111100", "10100010", "01010100", "01", "00011000", "01001001", "01010001", "10011011"], ["00101000", "11001001", "00001101", "00100111", "11011110", "00000010", "11101110", "00111010", "11111001", "11011110"]]
    test24 = [10, 40, ["00101010", "11010100", "10010100", "01111101", "00011110", "11010110", "11010111", "01011110", "11000010", "00010101", "11000101", "10011001", "11100001", "00000011", "10010000", "00000101", "11111101", "10101010", "11011101", "11110010", "11111001", "00000110", "00110110", "01001110", "10000100", "11001000", "01100110", "10011000", "00010100", "10101011", "00000100", "00011111", "10001110", "01011010", "01001101", "10100001", "01101100", "10100011", "10000000", "10010001"], ["11111101", "100101", "101011", "01000101", "1010010", "0011100", "0000001", "0110111", "010000", "0000111", "0011111", "00100000", "1100110", "0001000", "01000100", "010101", "1100010", "001001", "00010110", "111111", "101010", "111100", "010001", "1011110", "111010", "001011", "000111", "011100", "01000010", "1011101", "00011110", "100101", "0010101", "10101010", "00001111", "0100011", "000101", "0100111", "011000", "01010000"], ["11110100", "10011111", "01100000", "01001101", "11001000", "00100111", "01001001", "10101111", "01101101", "00000110"]]

    SCORE = 0

    #1) Addition tests
    bd = BinaryDomains()
    SCORE += (bd.add(test1[0],test1[1]) == test1[2])*0.125
    SCORE += (bd.add(test2[0],test2[1]) == test2[2])*0.125
    SCORE += (bd.add(test3[0],test3[1]) == test3[2])*0.125
    SCORE += (bd.add(test4[0],test4[1]) == test4[2])*0.125

    #2) Multiply tests
    SCORE += (bd.multiply(test5[0],test5[1]) == test5[2])*0.125
    SCORE += (bd.multiply(test6[0],test6[1]) == test6[2])*0.125
    SCORE += (bd.multiply(test7[0],test7[1]) == test7[2])*0.125
    SCORE += (bd.multiply(test8[0],test8[1]) == test8[2])*0.125

    #3) Inverse tests
    SCORE += (bd.inverse(test9[0]) == test9[1])*0.125
    SCORE += (bd.inverse(test10[0]) == test10[1])*0.125
    SCORE += (bd.inverse(test11[0]) == test11[1])*0.125
    SCORE += (bd.inverse(test12[0]) == test12[1])*0.125

    #4) Encoding tests
    rs13 = ReedSolomon(test13[0],test13[1],test13[2])
    SCORE += (rs13.encoding(test13[3])== test13[4])*0.125
    rs14 = ReedSolomon(test14[0],test14[1],test14[2])
    SCORE += (rs14.encoding(test14[3])== test14[4])*0.125
    rs15 = ReedSolomon(test15[0],test15[1],test15[2])
    SCORE += (rs15.encoding(test15[3])== test15[4])*0.125
    rs16 = ReedSolomon(test16[0],test16[1],test16[2])
    SCORE += (rs16.encoding(test16[3])== test16[4])*0.125

    #5) Decoding tests 1
    rs17 = ReedSolomon(test17[0],test17[1],test17[2])
    SCORE += (rs17.decoding(test17[3])[1]== test17[4])*0.125
    rs18 = ReedSolomon(test18[0],test18[1],test18[2])
    SCORE += (rs18.decoding(test18[3])[1]== test18[4])*0.125
    rs19 = ReedSolomon(test19[0],test19[1],test19[2])
    SCORE += (rs19.decoding(test19[3])[1]== test19[4])*0.125
    rs20 = ReedSolomon(test20[0],test20[1],test20[2])
    SCORE += (rs20.decoding(test20[3])[1]== test20[4])*0.125

    #6) Decoding tests 2
    rs21 = ReedSolomon(test21[0],test21[1],test21[2])
    SCORE += (rs21.decoding(test21[3])[1]== test21[4])*0.125
    rs22 = ReedSolomon(test22[0],test22[1],test22[2])
    SCORE += (rs22.decoding(test22[3])[1]== test22[4])*0.125
    rs23 = ReedSolomon(test23[0],test23[1],test23[2])
    SCORE += (rs23.decoding(test23[3])[1]== test23[4])*0.125
    rs24 = ReedSolomon(test24[0],test24[1],test24[2])
    SCORE += (rs24.decoding(test24[3])[1]== test24[4])*0.125
    
    #Printing results
    print("Votre note pour les tests PUBLICS est de "+str(SCORE)+"/3")

